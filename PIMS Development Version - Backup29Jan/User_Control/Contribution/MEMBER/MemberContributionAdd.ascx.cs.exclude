using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using PSPITS.DAL.DATA;
using PSPITS.COMMON;
using PSPITS.DAL;
using PSPITS.UIL;
using Telerik.Web.UI;
using Telerik.Charting;

public partial class User_Control_Contribution_MEMBER_MemberContributionAdd : System.Web.UI.UserControl
{
    public static string _pensionID = "0";
    public static string _servicebreakID = "0";
    public int RebindGrid
    {
        get { RadGridMemberContribution.Rebind(); return 1; }
    }

    private void LoadComboBox()
    {

        //Load service break type comboBox
        RadComboBoxMDA.DataSource = new PSPITSDO().GetMDA();
        RadComboBoxMDA.DataTextField = PSPITS.COMMON.Constants.COL_LIST_MDA;
        RadComboBoxMDA.DataValueField = PSPITS.COMMON.Constants.COL_LIST_MDAID;
        RadComboBoxMDA.DataBind();
        //
        RadComboBoxMonth.DataSource = new PSPITSDO().GetMonth();
        RadComboBoxMonth.DataTextField = PSPITS.COMMON.Constants.COL_LIST_MONTH;
        RadComboBoxMonth.DataValueField = PSPITS.COMMON.Constants.COL_LIST_MONTHCODE;
        RadComboBoxMonth.DataBind();
        //Load year of birth comboBox
        RadComboBoxYear.DataSource = new PSPITSDO().GetYear();
        RadComboBoxYear.DataTextField = PSPITS.COMMON.Constants.COL_LIST_YEAR;
        RadComboBoxYear.DataValueField = PSPITS.COMMON.Constants.COL_LIST_YEARCODE;
        RadComboBoxYear.DataBind();
    }
    public string MDAName
    {
        get { return RadComboBoxMDA.SelectedValue; }
        set { RadComboBoxMDA.SelectedValue = value; }
    }
    public int pensionID
    {
        get;
        set;
    }

    public string month
    {
        get { return RadComboBoxMonth.SelectedValue; }
        set { RadComboBoxMonth.SelectedValue = value.ToString(); }
    }
    public string year
    {
        get { return RadComboBoxYear.SelectedValue; }
        set { RadComboBoxYear.SelectedValue = value.ToString(); }
    }
    public string payrollNumber
    {
        get { return RadTextBoxPayrollNumber.Text; }
        set { RadTextBoxPayrollNumber.Text = value; }
    }
    public string grossPay
    {
        get { return RadTextBoxgrossPay.Text; }
        set { RadTextBoxgrossPay.Text = value; }
    }
    public string basicPay
    {
        get { return RadTextBoxBasicPay.Text; }
        set { RadTextBoxBasicPay.Text = value; }
    }
    public string Cola
    {
        get { return RadTextBoxCola.Text; }
        set { RadTextBoxCola.Text = value; }
    }
    public string EmployeeDeduction
    {
        get { return RadTextBoxemployeeDeduction.Text; }
        set { RadTextBoxemployeeDeduction.Text = value; }
    }
    public string EmployerDeduction
    {
        get { return RadTextBoxemployerDeduction.Text; }
        set { RadTextBoxemployerDeduction.Text = value; }
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!Page.IsPostBack)
        {
            //PSPITSDO _do = new PSPITSDO();
            //this.serviceBreakID = _do.PadCode(_do.GenServiceBreakID(), 9);
           this.month = this.year = "0";
           this.pensionID = 0;
            LoadComboBox();

        }
    }
    protected void Page_Init(object sender, EventArgs e)
    {
        GridTemplateColumn colEditMemberContribution = (GridTemplateColumn)RadGridMemberContribution.MasterTableView.GetColumn("columnRemove");
        colEditMemberContribution.ItemTemplate = new RadGridMemberContributionTemplate();
    }
    private void EmptyControl(Control ctrl)
    {

        if ((ctrl.GetType() == typeof(TextBox)))
        {
            ((TextBox)(ctrl)).Text = string.Empty;

        }
        else if ((ctrl.GetType() == typeof(RadComboBox)))
        {
            ((RadComboBox)(ctrl)).Text = string.Empty;
            ((RadComboBox)(ctrl)).SelectedIndex = -1;
            ((RadComboBox)(ctrl)).ClearSelection();
        }
        else if ((ctrl.GetType() == typeof(RadTextBox)))
        {
            ((RadTextBox)(ctrl)).Text = string.Empty;

        }

    }
    protected void RadButtonAddMemberContribution_Click(object sender, EventArgs e)
    {
        //Get handle of the Member
        PSPITSDO rdo = new PSPITSDO();
        MemberSalary aPD = new MemberSalary();
        aPD.pensionID = this.pensionID;
        aPD.month = int.Parse(this.month);
        aPD.year = int.Parse(this.year);
        aPD.payrollNumber = this.payrollNumber;
        aPD.grossPay = decimal.Parse( this.grossPay);
        aPD.basicPay = decimal.Parse(this.basicPay);
        aPD.cola = decimal.Parse(this.Cola);
        aPD.employeeDeduction = decimal.Parse(this.EmployeeDeduction);
        aPD.employerDeduction = decimal.Parse(this.EmployerDeduction);

        aPD.whoCreated = Page.User.Identity.Name;
        aPD.dateCreated = DateTime.Now;
       
        //
        //string doa = string.Format("{0}/{1}/{2}", this.startDay,this.startMonth, this.startYear);
        rdo.SaveMemberSalary(aPD);
        RadGridMemberContribution.Rebind();
        
        //clear the controls
        PSPITS.UIL.Utility.EmptyControl(RadTextBoxmemberName);
        PSPITS.UIL.Utility.EmptyControl(RadComboBoxMDA);
        PSPITS.UIL.Utility.EmptyControl(RadComboBoxMonth);
        PSPITS.UIL.Utility.EmptyControl(RadComboBoxYear);
        PSPITS.UIL.Utility.EmptyControl(RadTextBoxPayrollNumber);
        PSPITS.UIL.Utility.EmptyControl(RadTextBoxgrossPay);
        PSPITS.UIL.Utility.EmptyControl(RadTextBoxBasicPay);
        PSPITS.UIL.Utility.EmptyControl(RadTextBoxCola);
        PSPITS.UIL.Utility.EmptyControl(RadTextBoxemployeeDeduction);
        PSPITS.UIL.Utility.EmptyControl(RadTextBoxemployerDeduction);
    }
    protected void RadButtonAddMemberContribution_Load(object sender, EventArgs e)
    {

        RadAjaxManager radajaxmanager = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadAjaxManager1") as RadAjaxManager;
        RadAjaxLoadingPanel radajaxloading = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadAjaxLoadingPanel1") as RadAjaxLoadingPanel;
        RadButton RadButtonAddMemberContribution = (sender as RadButton).FindControl("RadButtonAddMemberContribution") as RadButton;

        RadGrid grid = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadGridMemberContribution") as RadGrid;
        RadTextBox RadTextBoxmemberName = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxmemberName") as RadTextBox;
        RadComboBox RadComboBoxMDA = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadComboBoxMDA") as RadComboBox;
        RadComboBox RadComboBoxMonth = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadComboBoxMonth") as RadComboBox;
        RadComboBox RadComboBoxYear = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadComboBoxYear") as RadComboBox;
        RadTextBox RadTextBoxPayrollNumber = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxPayrollNumber") as RadTextBox;
        RadTextBox RadTextBoxgrossPay = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxgrossPay") as RadTextBox;
        RadTextBox RadTextBoxBasicPay = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxBasicPay") as RadTextBox;
        RadTextBox RadTextBoxCola = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxCola") as RadTextBox;
        RadTextBox RadTextBoxemployeeDeduction = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxemployeeDeduction") as RadTextBox;
        RadTextBox RadTextBoxemployerDeduction = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxemployerDeduction") as RadTextBox;

        //load only when non of the controls are null
        if ((radajaxmanager != null) && (radajaxloading != null) && (RadButtonAddMemberContribution != null) && (grid != null))
        {
            radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, grid, radajaxloading);
            if (RadTextBoxmemberName != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadTextBoxmemberName, null);
            if (RadComboBoxMDA != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadComboBoxMDA, null);
            if (RadComboBoxMonth != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadComboBoxMonth, null);
            if (RadComboBoxYear != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadComboBoxYear, null);
            if (RadTextBoxPayrollNumber != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadTextBoxPayrollNumber, null);
            if (RadTextBoxgrossPay != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadTextBoxgrossPay, null);
            if (RadTextBoxBasicPay != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadTextBoxBasicPay, null);
            if (RadTextBoxCola != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadTextBoxCola, null);
            if (RadTextBoxemployeeDeduction != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadTextBoxemployeeDeduction, null);
            if (RadTextBoxemployerDeduction != null) radajaxmanager.AjaxSettings.AddAjaxSetting(RadButtonAddMemberContribution, RadTextBoxemployerDeduction, null);


        }

    }
    protected void RadGridMemberContribution_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)
    {
      
        RadGridMemberContribution.DataSource = new PSPITSDO().GetMemberSalaryByPensionID(this.pensionID);
    }
}

public class RadGridMemberContributionTemplate : System.Web.UI.ITemplate
{

    public void InstantiateIn(System.Web.UI.Control container)
    {
        RadButton ButtonEdit = new RadButton();
        ButtonEdit.ID = "ButtonEdit";
        ButtonEdit.Text = "Edit";
        ButtonEdit.Click += new EventHandler(EditMemberContribution_Click);
        ButtonEdit.Load += new EventHandler(EditMemberContribution_Load);
        container.Controls.Add(ButtonEdit);

    }
    protected void EditMemberContribution_Click(object sender, EventArgs e)
    {
        //PSPITSDO rdo = new PSPITSDO();

        MemberContributionEventArgs _bArgs = new MemberContributionEventArgs();

        RadGrid grid = (sender as Button).Parent.Parent.Parent.Parent.Parent as RadGrid;
        GridTableView gridTable = (sender as Button).Parent.Parent.Parent.Parent as GridTableView;
        GridItem gridItem = ((sender as Button).Parent.Parent as GridItem);
        GridDataItem griddataItem = gridTable.Items[gridItem.ItemIndex];
        _bArgs.pensionID = griddataItem["pensionID"].Text;
        _bArgs.month = griddataItem["month"].Text;
        _bArgs.year = griddataItem["year"].Text;
        //fire the Edit clicked event
        MemberContributionToEditSession.MemberContributionToEdit.MemberContribution = _bArgs;
    }
    protected void EditMemberContribution_Load(object sender, EventArgs e)
    {
        RadAjaxManager radajaxmanager = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadAjaxManager1") as RadAjaxManager;
        RadAjaxLoadingPanel radajaxloading = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadAjaxLoadingPanel1") as RadAjaxLoadingPanel;
        RadButton btnEdit = (sender as RadButton).FindControl("ButtonEdit") as RadButton;

        RadGrid grid = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadGridMemberContribution") as RadGrid;
        RadTextBox RadTextBoxmemberName = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxmemberName") as RadTextBox;
        RadComboBox RadComboBoxMDA = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadComboBoxMDA") as RadComboBox;
        RadComboBox RadComboBoxMonth = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadComboBoxMonth") as RadComboBox;
        RadComboBox RadComboBoxYear = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadComboBoxYear") as RadComboBox;
        RadTextBox RadTextBoxPayrollNumber = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxPayrollNumber") as RadTextBox;
        RadTextBox RadTextBoxgrossPay = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxgrossPay") as RadTextBox;
        RadTextBox RadTextBoxBasicPay = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxBasicPay") as RadTextBox;
        RadTextBox RadTextBoxCola = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxCola") as RadTextBox;
        RadTextBox RadTextBoxemployeeDeduction = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxemployeeDeduction") as RadTextBox;
        RadTextBox RadTextBoxemployerDeduction = new PSPITS.UIL.Utility().FindControlToRootOnly((sender as RadButton).Parent, "RadTextBoxemployerDeduction") as RadTextBox;
        
        //load only when non of the controls are null
        if ((radajaxmanager != null) && (radajaxloading != null) && (btnEdit != null) && (grid != null))
        {
            radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, grid, radajaxloading);
            if (RadTextBoxmemberName != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadTextBoxmemberName, null);
            if (RadComboBoxMDA != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadComboBoxMDA, null);
            if (RadComboBoxMonth != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadComboBoxMonth, null);
            if (RadComboBoxYear != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadComboBoxYear, null);
            if (RadTextBoxPayrollNumber != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadTextBoxPayrollNumber, null);
            if (RadTextBoxgrossPay != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadTextBoxgrossPay, null);
            if (RadTextBoxBasicPay != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadTextBoxBasicPay, null);
            if (RadTextBoxCola != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadTextBoxCola, null);
            if (RadTextBoxemployeeDeduction != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadTextBoxemployeeDeduction, null);
            if (RadTextBoxemployerDeduction != null) radajaxmanager.AjaxSettings.AddAjaxSetting(btnEdit, RadTextBoxemployerDeduction, null);
          
          
        }

    }
}